<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="userMapper">
    <!-- 소셜 제공자와 소셜아이디로 기존 회원 여부 확인-->
    <select id="findIdByProviderAndSocialID" resultType="Long">
        select id
        from user
        where provider = #{provider} and social_id= #{socialId}
    </select>
    <!-- 신규 사용자 로그인시 DB에 사용자 정보 가져오기-->
    <insert id="insertMemberByAuth" parameterType="userInsertDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (
            provider, social_id,nickname,profile_image,gender,age_range_id,email,
            access_token,expires_at,refresh_token,refresh_token_expires_at,created_at
        ) VALUES (
                     #{provider},#{socialId},#{nickName},#{profileImage},#{gender},#{ageRangeId},#{email},
                     #{accessToken},#{expiresAt},#{refreshToken},#{refreshTokenExpiresAt},#{createdAt}
                 )
    </insert>
    <!-- 기존 사용자 로그인시 사용자 정보 업데이트-->
    <update id="updateMemberByAuth" parameterType="UserInsertDTO">
        UPDATE user
        SET
            nickName = #{nickName},
            profile_image = #{profileImage},
            age_range_id = #{ageRangeId},
            gender = #{gender},
            email = #{email},
            access_token = #{accessToken},
            expires_at = #{expiresAt},
            refresh_token = #{refreshToken},
            refresh_token_expires_at = #{refreshTokenExpiresAt},
            created_at = #{createdAt}
        WHERE id = #{id}
    </update>
    <!-- update 후 사용자 정보 다시 가져오기 -->
    <select id="userInfobyUpdated" resultType="userInsertDTO">
        SELECT * FROM user WHERE id = #{id}
    </select>
    <!-- 사용자 소셜 제공자 가져오기 -->
    <select id="userProvider" resultType="String">
        SELECT provider FROM user WHERE id = #{id}
    </select>
    <!-- 기존 로그아웃 시 access 토큰 정보 제거-->
    <update id="userAccessTokenRemove" parameterType="Long">
        update user
        set
            access_token = null,
            expires_at = null,
            refresh_token = null,
            refresh_token_expires_at = null
        where id=#{id}
    </update>
    <!-- 회원 탈퇴를 위해 회원 정보 가져오기 -->
    <select id="findProviderAndSocialIDById" resultType="withDrawUserDTO">
        select id, provider, social_id as socialId, access_token as accessToken, expires_at as expiresAt
        from user
        where id=#{id}
    </select>
    <!-- 소셜 탈퇴 시 db에 회원 제거 -->
    <delete id="deleteUserById">
        delete from user where id=#{id}
    </delete>
    <!-- 세션ID로 회원정보 가져오기 -->
    <select id="findUserInfoBySessionId" resultType="userInsertDTO" parameterType="Long">
        select provider, nickname, profile_image as profileImage, gender, age_range_id as ageRangeId, email
        from user
        where id=#{id}
    </select>
    <!-- 세션ID로 소셜 정보 가져오기 -->
    <select id="findUserSocialInfoBySessionId" resultType="userSocialInfoDTO" parameterType="Long">
        select provider, social_id as socialId, access_token as accessToken, expires_at as expiresAt, refresh_token as refreshToken,refresh_token_expires_at as refreshTokenExpiresAt
        from user
        where id=#{id}
    </select>

</mapper>











