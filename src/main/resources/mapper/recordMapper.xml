<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="record">

	<insert id="createComment" parameterType="commentDTO" keyProperty="id" useGeneratedKeys="true">
		INSERT INTO record_comment (comment_writer_id, record_id, content, comment_sequence, indentation_number)
		VALUES (#{cmtWriterId}, #{recordId}, #{cmtContent}, #{cmtSequence}, #{indentationNum});
	</insert>

	<insert id="insertNewReComment" parameterType="commentDTO" keyProperty="id" useGeneratedKeys="true">
		INSERT INTO record_comment (comment_writer_id, record_id, content, comment_sequence, indentation_number)
		VALUES (#{cmtWriterId}, #{recordId}, #{cmtContent}, #{cmtSequence}, #{indentationNum});
	</insert>

	<insert id="createPost" parameterType="createPostDTO" keyProperty="id" useGeneratedKeys="true">
		INSERT INTO record_board (user_id, location_id, title, content, is_visible, thumbnail, start_date, end_date)
		VALUES (#{userId}, #{locationId}, #{title}, #{content}, #{isVisible}, #{thumbnail}, #{startDate}, #{endDate});
	</insert>

	<insert id="createPostImg" parameterType="postImgDTO" keyProperty="id" useGeneratedKeys="true">
		INSERT INTO record_img (img_url, record_id)
		VALUES (#{imgUrl}, #{recordId});
	</insert>

	<insert id="insertLike" parameterType="postLikeDTO" keyProperty="id" useGeneratedKeys="true">
		INSERT INTO record_like (user_id, record_id)
		VALUES(#{userId}, #{recordId});
	</insert>

	<select id="selectLikeList" parameterType="long" resultType="postLikeDTO">
		SELECT
		rl.id AS likeId,
		rl.user_id AS userId,
		u.nickname AS likeUserNickname,
		u.profile_image AS profileImg
		FROM
		record_like rl
		JOIN
		user u ON rl.user_id = u.id
		WHERE
		rl.record_id = #{recordId};
	</select>

	<select id="postImgList" resultType="postImgDTO">
		SELECT id AS imgId, img_url AS imgUrl, record_id As recordId
		FROM record_img WHERE record_id = #{recordId};
	</select>

	<select id="locationList" resultType="locationDTO">
		SELECT * FROM location;
	</select>

	<select id="selectPostInfo" parameterType="long" resultType="postInfoDTO" >
		SELECT
		rb.id AS boardId,
		loc.city As city,
		u.nickname AS nickName,
		u.profile_image AS profileImg,
		u.id AS userId,
		rb.title AS title,
		rb.content AS content,
		rb.thumbnail AS thumbnail ,
		rb.created_at AS createdAt,
		rb.updated_at AS updatedAt,
		rb.start_date AS startDate,
		rb.end_date AS endDate,
		rb.view_count AS views,
		rb.is_visible AS isVisible,
		(SELECT COUNT(rl.id) FROM record_like rl WHERE rb.id = rl.record_id) AS likeCount,
		COUNT(rc.id) AS cmtCount
		FROM
		record_board rb
		LEFT JOIN user u ON rb.user_id = u.id
		LEFT JOIN location loc ON rb.location_id = loc.id
		LEFT JOIN record_comment rc ON rb.id = rc.record_id
		WHERE
		rb.id = #{id}
		GROUP BY
		rb.id;
	</select>

	<select id="commentList" parameterType="long" resultType="commentDTO">
		select
		rc.id AS cmtid,
		u.nickname AS cmtUserNickName,
		rc.comment_writer_id AS cmtWriterId,
		u.profile_image AS profileImg,
		rc.content AS cmtContent,
		rc.comment_sequence AS cmtSequence,
		rc.indentation_number AS indentationNum,
		rc.created_at AS cmtCreatedAt,
		rc.updated_at AS cmtUpdatedAt
		from record_comment rc
		LEFT JOIN user u on rc.comment_writer_id  = u.id
		where record_id  = #{id}
		ORDER BY
		rc.created_at ASC;
	</select>

	<update id="updatePostInfo" parameterType="postInfoDTO">
		UPDATE record_board
		SET title = #{title},
			content = #{content},
			is_visible = #{isVisible},
			thumbnail = #{thumbnail},
			start_date = #{startDate},
			end_date = #{endDate}
		WHERE id = #{id};
	</update>

	<update id="incrementPostViews" parameterType="long">
		UPDATE record_board
		SET view_count = view_count + 1
		WHERE id = #{id}
	</update>

	<update id="updateComment" parameterType="commentDTO">
		UPDATE record_comment
		SET content = #{cmtContent}
		WHERE id = #{cmtId};
	</update>

	<delete id="deletePost">
		DELETE FROM record_board
		WHERE id = #{id};
	</delete>

	<delete id="deleteComment">
		DELETE FROM record_comment
		WHERE id = #{id};
	</delete>

	<delete id="deleteReComment">
		DELETE FROM record_comment
		WHERE indentation_number = #{id};
	</delete>

	<delete id="deleteLike" parameterType="postLikeDTO">
		DELETE FROM record_like
		WHERE user_id = #{userId} AND record_id = #{recordId}
	</delete>

	<!-- 내 게시물 전체 리스트 가져오기 -->
	<select id="mylist" resultType="postInfoDTO" parameterType="Long">
		SELECT
		rb.id AS boardId,
		loc.city,
		u.nickname,
		rb.title,
		rb.thumbnail,
		rb.created_at,
		rb.updated_at,
		rb.is_visible,
		(SELECT COUNT(*) FROM record_like rl WHERE rl.record_id = rb.id) AS likeCount
		FROM
		record_board rb
		LEFT JOIN user u ON rb.user_id = u.id
		LEFT JOIN location loc ON rb.location_id = loc.id
		LEFT JOIN record_like rl ON rb.id = rl.record_id
		WHERE
		u.id  = #{userId}
		ORDER BY rb.id DESC
	</select>

	<select id="mylistScroll" resultType="postInfoDTO" parameterType="postScrollDTO">
		SELECT
		rb.id AS boardId,
		loc.city,
		u.nickname,
		rb.title,
		rb.thumbnail,
		rb.created_at,
		rb.updated_at,
		rb.is_visible,
		(SELECT COUNT(*) FROM record_like rl WHERE rl.record_id = rb.id) AS likeCount
		FROM
		record_board rb
		LEFT JOIN user u ON rb.user_id = u.id
		LEFT JOIN location loc ON rb.location_id = loc.id
		LEFT JOIN record_like rl ON rb.id = rl.record_id
		WHERE
		u.id  = #{userId}
		ORDER BY rb.id DESC
		limit #{startRowNum}, #{rowCount}
	</select>

	<!-- 마커 클릭 한 해당 지역 내 게시물 가져오기 -->
	<select id="list_mylocation_click" resultType="postInfoDTO" parameterType="java.util.Map">
		SELECT rb.title, rb.thumbnail, rb.user_id, rb.is_visible, rb.location_id, loc.city, rb.id AS boardId
		FROM
		record_board rb
		LEFT JOIN user u ON rb.user_id = u.id
		LEFT JOIN location loc ON rb.location_id = loc.id
		LEFT JOIN record_like rl ON rb.id = rl.record_id
		WHERE u.id = #{userId} AND loc.id = #{locationId}
		ORDER BY rb.id DESC
	</select>

	<!-- 드롭다운 선택한 해당 지역 내 게시물 가져오기 -->
	<select id="list_mylocation_dropdown" resultType="postInfoDTO" parameterType="java.util.Map">
		SELECT rb.title, rb.thumbnail, rb.user_id, rb.is_visible, rb.location_id, loc.city, rb.id AS boardId
		FROM
		record_board rb
		LEFT JOIN user u ON rb.user_id = u.id
		LEFT JOIN location loc ON rb.location_id = loc.id
		LEFT JOIN record_like rl ON rb.id = rl.record_id
		WHERE u.id = #{userId} AND loc.id = #{locationId}
		ORDER BY rb.id DESC
	</select>

	<!-- 내 지도에 마커 자료 가져오기 -->
	<select id="mymap" resultType="locationDTO" parameterType="Long">
		SELECT rb.location_id, loc.lat, loc.lon, loc.city, loc.id
		FROM record_board rb
		JOIN location loc ON rb.location_id = loc.id
		WHERE rb.user_id = #{userId};
	</select>

	<!-- 공유피드 전체 리스트 가져오기 -->
	<select id="feedlist" resultType="postInfoDTO">
		SELECT rb.title, rb.thumbnail, rb.user_id, rb.is_visible, rb.location_id, loc.city, rb.id AS boardId, COUNT(rl.record_id) AS likeCount, rb.start_date, rb.end_date
		FROM record_board rb
		LEFT JOIN user u ON rb.user_id = u.id
		LEFT JOIN location loc ON rb.location_id = loc.id
		LEFT JOIN record_like rl ON rb.id = rl.record_id
		WHERE
		rb.is_visible  = 1
		GROUP BY rb.title, rb.thumbnail, rb.user_id, rb.is_visible, rb.location_id, loc.city, rb.id, u.id, loc.id
		ORDER BY rb.id desc
	</select>

	<!-- 공유피드에서 버튼 클릭 해당지역 게시물 가져오기 -->
	<select id="feedlist_by_location_pattern" resultType="postInfoDTO" parameterType="java.util.Map">
		SELECT rb.title, rb.thumbnail, rb.user_id, rb.is_visible, rb.location_id, loc.city, rb.id AS boardId, COUNT(rl.record_id) AS likeCount, rb.start_date, rb.end_date
		FROM record_board rb
		LEFT JOIN user u ON rb.user_id = u.id
		LEFT JOIN location loc ON rb.location_id = loc.id
		LEFT JOIN record_like rl ON rb.id = rl.record_id
		WHERE rb.is_visible = 1
		AND (rb.location_id LIKE #{locationIdPattern} OR rb.location_id = #{locationIdSpecialId} OR rb.location_id = #{locationIdSpecialId2} OR rb.location_id = #{locationIdSpecialId3})
		GROUP BY rb.title, rb.thumbnail, rb.user_id, rb.is_visible, rb.location_id, loc.city, rb.id, u.id, loc.id
		ORDER BY rb.id desc;
	</select>

	<!-- 공유피드에서 버튼 클릭 전국 게시물 가져오기 -->
	<select id="feedlist_by_location_pattern_all" resultType="postInfoDTO">
		SELECT rb.title, rb.thumbnail, rb.user_id, rb.is_visible, rb.location_id, loc.city, rb.id AS boardId, COUNT(rl.record_id) AS likeCount, rb.start_date, rb.end_date
		FROM record_board rb
		LEFT JOIN user u ON rb.user_id = u.id
		LEFT JOIN location loc ON rb.location_id = loc.id
		LEFT JOIN record_like rl ON rb.id = rl.record_id
		WHERE rb.is_visible = 1
		GROUP BY rb.title, rb.thumbnail, rb.user_id, rb.is_visible, rb.location_id, loc.city, rb.id, u.id, loc.id
		ORDER BY rb.id desc;
	</select>

	<!-- 공유피드에서 좋아요버튼 클릭 좋아요많은순 게시물 가져오기 -->
	<select id="feedlist_like" resultType="postInfoDTO">
		SELECT rb.title, rb.thumbnail, rb.user_id, rb.is_visible, rb.location_id, loc.city, rb.id AS boardId, COUNT(rl.record_id) AS likeCount, rb.start_date, rb.end_date
		FROM record_board rb
		LEFT JOIN user u ON rb.user_id = u.id
		LEFT JOIN location loc ON rb.location_id = loc.id
		LEFT JOIN record_like rl ON rb.id = rl.record_id
		WHERE rb.is_visible = 1
		GROUP BY rb.title, rb.thumbnail, rb.user_id, rb.is_visible, rb.location_id, loc.city, rb.id, u.id, loc.id
		ORDER BY likeCount DESC, rb.created_at DESC;
	</select>

</mapper>











