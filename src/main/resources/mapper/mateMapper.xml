<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mateBbs">
	<insert id="mateBoardInsert" parameterType="mateBoardInsertDTO" useGeneratedKeys="true" keyProperty="id">
		insert into mate_board (user_id, region_id, age_range_id, title, content, thumbnail, start_date,
								end_date, recruit_number, gender)
		values (#{userId}, #{regionId},
				#{ageRangeId},
				#{title}, #{content}, #{thumbnail}, #{startDate}, #{endDate},
				#{recruitNumber}, #{gender})
	</insert>

	<select id="mateBoardSelectOne" parameterType="long" resultType="mateBoardSelectOneDTO">
		select mb.id,
			   mb.user_id        as userId,
			   mb.region_id      as regionId,
			   mb.age_range_id   as ageRangeId,
			   mb.title,
			   mb.content,
			   mb.thumbnail,
			   mb.start_date     as startDate,
			   mb.end_date       as endDate,
			   mb.recruit_number as recruitNumber,
			   mb.gender,
			   mb.created_at     as createdAt,
			   mb.is_finish      as isFinish,
			   u.nickname        as userNickName,
			   u.profile_image   as userProfileImage,
			   u.age_range_id    as userAgeRange,
			   u.gender          as userGender
		from user u,
			 mate_board mb
		where mb.id = #{id}
		  and u.id = mb.user_id
	</select>

	<select id="findUserGenderAgeById" resultType="userGenderAgeDTO" parameterType="long">
		select id,
			   age_range_id as ageRange,
			   gender
		from user
		where id = #{id}
	</select>

	<select id="checkApply" parameterType="mateMatchingAlarmDTO" resultType="int">
		select exists (select *
					   from mate_matching_alarm
					   where sender_id = #{senderId}
						 and mate_board_id = #{mateBoardId});
	</select>

	<update id="updateMateBoard" parameterType="mateBoardInsertDTO">
		update mate_board
		set region_id      = #{regionId},
            age_range_id   = #{ageRangeId},
            title          = #{title},
            content        = #{content},
            thumbnail      = #{thumbnail},
            start_date     = #{startDate},
            end_date       = #{endDate},
            recruit_number = #{recruitNumber},
            gender         = #{gender},
            is_finish      = #{isFinish}
        where id = #{id}
    </update>

    <delete id="deleteMateBoard" parameterType="long">
        delete
        from mate_board
        where id = #{id}
    </delete>

    <insert id="insertMateMatchingAlarm" parameterType="mateMatchingAlarmDTO">
        insert into mate_matching_alarm (mate_board_id, sender_id, content)
        values (#{mateBoardId}, #{senderId}, #{content})
    </insert>


    <select id="list" resultType="mateBoardListDTO" parameterType="map">
        SELECT
        mb.id AS mateBoardId,
        u.nickname AS nickname,
        mb.content AS content,
        mb.title AS title,
        mb.thumbnail AS thumbnail,
		mb.start_date AS startDate,
		mb.end_date AS endDate,
		ar.range_description AS ageRange
		FROM
		mate_board mb
		JOIN user u ON mb.user_id = u.id
		JOIN age_range ar ON mb.age_range_id = ar.id
		<where>
			<if test='searchType != null'>
				<if test='searchType.equals("title")'>
					AND title LIKE concat('%', #{keyword}, '%')
				</if>
				<if test='searchType.equals("content")'>
					AND content LIKE concat('%', #{keyword}, '%')
				</if>
				<if test='searchType.equals("title_content")'>
					AND title LIKE concat('%', #{keyword}, '%')
					or content LIKE concat('%', #{keyword}, '%')
				</if>
				<if test='searchType.equals("nickname")'>
					AND nickname LIKE concat('%', #{keyword}, '%')
				</if>
			</if>
		</where>
		ORDER BY
		mb.id DESC
		LIMIT #{start} OFFSET #{end}
	</select>

	<select id="one" resultType="mateBoardListDTO">
		SELECT
		mb.id AS mateBoardId,
		u.nickname as nickname,
		mb.content as content,
		mb.title as title,
		mb.thumbnail as thumbnail,
		mb.start_date as startDate,
		mb.end_date as endDate,
		ar.range_description as ageRange
		FROM
		mate_board mb
		JOIN
		user u ON mb.user_id = u.id
		JOIN
		age_range ar ON mb.age_range_id = ar.id
		WHERE
		mb.id = #{mateBoardId};
	</select>

	<select id="count" resultType="Integer">
		SELECT COUNT(*)
		FROM mate_board mb
		JOIN user u ON mb.user_id = u.id
		JOIN age_range ar ON mb.age_range_id = ar.id
		<where>
			<if test='searchType != null'>
				<if test='searchType.equals("title")'>
					AND title LIKE concat('%', #{keyword}, '%')
				</if>
				<if test='searchType.equals("content")'>
					AND content LIKE concat('%', #{keyword}, '%')
				</if>
				<if test='searchType.equals("title_content")'>
					AND title LIKE concat('%', #{keyword}, '%')
					or content LIKE concat('%', #{keyword}, '%')
				</if>
				<if test='searchType.equals("nickname")'>
					AND nickname LIKE concat('%', #{keyword}, '%')
				</if>
			</if>
		</where>
	</select>

	<select id="location" resultType="locationDTO">
		SELECT id   as locationId,
			   city as city
		FROM location;
	</select>

	<select id ="commentList" resultType="mateCommentDTO">
		SELECT
		mc.id AS commentId,
		mc.mate_board_id AS mateBoardId,
		mc.user_id AS userId,
		mc.content,
		mc.comment_sequence AS commentSequence,
		mc.indentation_number AS indentationNumber,
		mc.created_at AS createdAt,
		mc.updated_at AS updatedAt,
		u.nickname As nickname,
		u.profile_image AS profileImage
		FROM mate_comment mc
		JOIN user u ON mc.user_id = u.id
		WHERE mate_board_id = #{mateBoardId}
		ORDER BY mc.comment_sequence ASC;
	</select>
	<insert id="commentInsert" parameterType="mateCommentDTO">
		INSERT INTO mate_comment
		(mate_board_id, user_id, content, comment_sequence, indentation_number)
		VALUES (#{mateBoardId}, #{userId}, #{content}, 0, 0);
	</insert>

	<insert id="replyInsert" parameterType="mateCommentDTO">
		INSERT INTO mate_comment
		(mate_board_id, user_id, content, comment_sequence, indentation_number)
		VALUES (#{mateBoardId}, #{userId}, #{content}, #{commentSequence}, #{indentationNumber});
	</insert>

	<insert id="commentDelete" parameterType="mateCommentDTO">
		DELETE FROM mate_comment
		WHERE id = #{commentId};
	</insert>

	<insert id="commentUpdate" parameterType="mateCommentDTO">
		UPDATE mate_comment
		SET content = #{content}
		WHERE id = #{commentId};
	</insert>

</mapper>











