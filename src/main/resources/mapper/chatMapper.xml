<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chatMapper">
    <insert id="insertChatroom" parameterType="chatInfoDTO" useGeneratedKeys="true" keyProperty="roomId">
        INSERT INTO mate_chatroom (chatroom_name, post_id, guest_id, created_at) VALUES (
                                                                                            #{chatRoomName}, #{postId},
                                                                                            #{guestId}, NOW())
    </insert>
    <!-- Owner 추가 -->
    <insert id="insertOwnerChatroom" parameterType="chatInfoDTO" useGeneratedKeys="true">
        INSERT INTO mate_user_chatroom (user_id, chatroom_id, is_owner)
        VALUES (#{ownerId}, #{roomId}, 1)
    </insert>

    <!-- Guest 추가 -->
    <insert id="insertGuestChatroom" parameterType="chatInfoDTO" useGeneratedKeys="true">
        INSERT INTO mate_user_chatroom (user_id, chatroom_id, is_owner)
        VALUES (#{guestId}, #{roomId}, 0)
    </insert>
    <!-- 메세지 추가-->
    <insert id="insertChatMessage" parameterType="chatMessageDTO" useGeneratedKeys="true" keyProperty="messageId">
        INSERT INTO mate_chat_message (message_type,chatroom_id, sender_id, message,created_at)
        VALUES (#{messageType},#{roomId}, #{senderId}, #{message},#{sendTime})
    </insert>
    <!-- 챗룸 update -->
    <update id="updateLastChatIdByRoomId" parameterType="chatMessageDTO">
        UPDATE mate_chatroom
        SET last_chat_id = #{messageId}
        WHERE id = #{roomId};
    </update>
    <!-- sender update -->
    <update id="updateSenderChatroom" parameterType="chatMessageDTO">
        UPDATE mate_user_chatroom
        SET last_read_chat_id = #{messageId},
            unread_chat_number = 0
        WHERE user_id = #{senderId} AND chatroom_id=#{roomId};
    </update>
    <!-- receiver update -->
    <update id="updateReceiverChatroom" parameterType="chatMessageDTO">
        <![CDATA[
        UPDATE mate_user_chatroom
        SET unread_chat_number = CASE
                                     WHEN (unread_chat_number - #{messageId}) < 0 THEN 0
                                     ELSE (unread_chat_number - #{messageId})
            END
        WHERE user_id = #{senderId} AND chatroom_id = #{roomId};
        ]]>
    </update>
    <select id="getLastChatIdByRoomId" parameterType="Long" resultType="Long">
        select last_chat_id
        from mate_chatroom
        where id=#{roomId}
    </select>
    <select id="selectRoomIdByPostIdAndGuestID" parameterType="Long" resultType="Long">
        select id
        from mate_chatroom
        where post_id=#{postId} AND guest_id=#{guestId}
    </select>
    <select id="selectRoomInfoByRoomId" parameterType="chatroomRequestDTO" resultType="String">
        select chatroom_name
        from mate_chatroom
        where id=#{roomId}
    </select>
    <select id="selectReceiverIdByRoomIdAndSenderId" parameterType="chatroomRequestDTO" resultType="Long">
        select user_id
        from mate_user_chatroom
        where  not user_id = #{senderId}
          AND chatroom_id=#{roomId}
    </select>
    <select id="selectMessageListByRoomId" parameterType="chatroomRequestDTO" resultType="chatMessageDTO">
        select mcm.id,
               mcm.message_type   as messageType,
               mcm.chatroom_id    as chatroomId,
               mcm.sender_id      as senderId,
               user.nickname      as senderNickname,
               user.profile_image as senderProfileImage,
               mcm.message,
               mcm.created_at     as sendTime
        from mate_chat_message mcm
                 join user on user.id = mcm.sender_id
        where chatroom_id = #{roomId}
        order by sendTime asc
    </select>
    <update id="updateLastJoinAt" parameterType="map">
        UPDATE mate_user_chatroom
        SET last_join_at = NOW()
        WHERE user_id = #{userId}
          AND chatroom_id = #{roomId};
    </update>

    <select id="getChatRoomListById" parameterType="long" resultType="chatroomListDTO">
        SELECT
        mc.id AS roomId,
        mc.chatroom_name AS chatRoomName,
        mcm.message AS lastMessage,
        mcm.created_at AS lastMessageCreatedAt,
        CASE
        WHEN mc.guest_id != #{id} THEN user.profile_image
        ELSE (SELECT u.profile_image
        FROM user u
        JOIN mate_user_chatroom muc ON u.id = muc.user_id
        WHERE muc.is_owner = 1 AND muc.chatroom_id = mc.id)
        END AS opponentProfileImg,
        (SELECT u.nickname
        FROM user u
        WHERE u.id = mcm.sender_id) AS senderNickname
        FROM
        mate_chatroom mc
        JOIN
        mate_chat_message mcm ON mc.last_chat_id = mcm.id AND mcm.message_type != 'JOIN'
        JOIN
        user ON user.id = mc.guest_id
        WHERE
        mc.guest_id = #{id}
        OR mc.post_id IN (SELECT mb.id FROM mate_board mb WHERE mb.user_id = #{id})
        ORDER BY
        mc.id DESC;
    </select>
</mapper>











